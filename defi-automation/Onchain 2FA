// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title On-chain Auto-Rotating Authentication Trap
/// @notice Generates a new 6-digit auth code every `rotationInterval` blocks.
contract OnchainAuthTrap {
    uint256 public currentCode;
    uint256 public lastRotationBlock;
    uint256 public rotationInterval;
    address public operator;

    event CodeRotated(uint256 newCode, uint256 atBlock);

    modifier onlyOperator() {
        require(msg.sender == operator, "Not operator");
        _;
    }

    constructor(uint256 _rotationInterval) {
        operator = msg.sender;
        rotationInterval = _rotationInterval;
        _rotateCode();
    }

    /// @dev Rotate automatically if enough blocks have passed
    function _autoRotate() internal {
        if (block.number >= lastRotationBlock + rotationInterval) {
            _rotateCode();
        }
    }

    /// @dev Force rotate code (operator only)
    function forceRotate() external onlyOperator {
        _rotateCode();
    }

    function _rotateCode() internal {
        currentCode = uint256(
            keccak256(
                abi.encodePacked(block.timestamp, blockhash(block.number - 1), address(this))
            )
        ) % 1_000_000; // 6-digit code
        lastRotationBlock = block.number;
        emit CodeRotated(currentCode, block.number);
    }

    /// @notice Check if provided code is correct (auto-rotates if interval passed)
    function checkCode(uint256 code) external returns (bool) {
        _autoRotate();
        return code == currentCode;
    }
}
